"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10' });
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            username: todo.username,
            title: todo.title
        },
        ConditionExpression: "#id = :id",
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "ALL_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) { //{
        let attribute = attributes[i]; //   TableName: 'process.env.TODOS_TABLE', 
        if (attribute !== "title" && attribute !== "username" && attribute !== "id") { //   Key: {username: todo.username, title: todo.title },
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute; //   UpdateExpression: 'set #year = :year, #done = :done',
            params["ExpressionAttributeNames"]["#" + attribute] = attribute; //   ExpressionAttributeNames: { '#year': 'year', '#done': 'done' },
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute]; //   ExpressionAttributeValues: { ':year': 2022, ':done': true },
            prefix = ", "; //   ReturnValues: 'ALL_NEW' //  } 
        }
    }
    params["ExpressionAttributeNames"]["#" + "id"] = "id";
    params["ExpressionAttributeValues"][":" + "id"] = todo["id"].toString();
    try {
        const updatedTodo = await docClient.update(params).promise();
        return updatedTodo.Attributes;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updateTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVRvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBWWhGLEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUMvQixJQUFJLE1BQU0sR0FBVztRQUNqQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNELFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDcEI7UUFDRCxtQkFBbUIsRUFBRSxXQUFXO1FBQ2hDLHlCQUF5QixFQUFFLEVBQUU7UUFDN0Isd0JBQXdCLEVBQUUsRUFBRTtRQUM1QixnQkFBZ0IsRUFBRSxFQUFFO1FBQ3BCLFlBQVksRUFBRSxTQUFTO0tBQzFCLENBQUM7SUFDRixJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDcEIsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFtRCxHQUFHO1FBQzlGLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUE2RCwyQ0FBMkM7UUFDdEksSUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxLQUFLLElBQUksRUFBRSxFQUFjLHdEQUF3RDtZQUMvSSxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQVcsMERBQTBEO1lBQ2pKLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBdUIsb0VBQW9FO1lBQzNKLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBZ0IsaUVBQWlFO1lBQ3hKLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBeUUsbUNBQW1DO1NBQzdIO0tBQ0o7SUFDRCxNQUFNLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO0lBQ3RELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFeEUsSUFBSTtRQUNBLE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUM1RCxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUE7S0FDaEM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDcEMsT0FBTyxJQUFJLENBQUE7S0FDZDtBQUNMLENBQUM7QUFFRCxrQkFBZSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBV1MgPSByZXF1aXJlKCdhd3Mtc2RrJyk7XG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KHsgYXBpVmVyc2lvbjogJzIwMTItMDgtMTAnIH0pO1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICBLZXk6IHN0cmluZyB8IHt9LFxuICAgIENvbmRpdGlvbkV4cHJlc3Npb246IGFueSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBhbnksXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBhbnksXG4gICAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nLFxuICAgIFJldHVyblZhbHVlczogc3RyaW5nXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRvZG8odG9kbzogYW55KSB7XG4gICAgbGV0IHBhcmFtczogUGFyYW1zID0ge1xuICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0b2RvLnVzZXJuYW1lLFxuICAgICAgICAgICAgdGl0bGU6IHRvZG8udGl0bGVcbiAgICAgICAgfSxcbiAgICAgICAgQ29uZGl0aW9uRXhwcmVzc2lvbjogXCIjaWQgPSA6aWRcIixcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge30sXG4gICAgICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgICAgIFJldHVyblZhbHVlczogXCJBTExfTkVXXCJcbiAgICB9O1xuICAgIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgICBsZXQgYXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHRvZG8pO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3tcbiAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgVGFibGVOYW1lOiAncHJvY2Vzcy5lbnYuVE9ET1NfVEFCTEUnLCBcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJ0aXRsZVwiICYmIGF0dHJpYnV0ZSAhPT0gXCJ1c2VybmFtZVwiICYmIGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7ICAgICAgICAgICAgIC8vICAgS2V5OiB7dXNlcm5hbWU6IHRvZG8udXNlcm5hbWUsIHRpdGxlOiB0b2RvLnRpdGxlIH0sXG4gICAgICAgICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9IHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7ICAgICAgICAgICAvLyAgIFVwZGF0ZUV4cHJlc3Npb246ICdzZXQgI3llYXIgPSA6eWVhciwgI2RvbmUgPSA6ZG9uZScsXG4gICAgICAgICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlTmFtZXNcIl1bXCIjXCIgKyBhdHRyaWJ1dGVdID0gYXR0cmlidXRlOyAgICAgICAgICAgICAgICAgICAgICAgLy8gICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsgJyN5ZWFyJzogJ3llYXInLCAnI2RvbmUnOiAnZG9uZScgfSxcbiAgICAgICAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIl1bXCI6XCIgKyBhdHRyaWJ1dGVdID0gdG9kb1thdHRyaWJ1dGVdOyAgICAgICAgICAgICAgICAvLyAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHsgJzp5ZWFyJzogMjAyMiwgJzpkb25lJzogdHJ1ZSB9LFxuICAgICAgICAgICAgcHJlZml4ID0gXCIsIFwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIFJldHVyblZhbHVlczogJ0FMTF9ORVcnIC8vICB9IFxuICAgICAgICB9XG4gICAgfVxuICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIFwiaWRcIl0gPSBcImlkXCI7XG4gICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiXVtcIjpcIiArIFwiaWRcIl0gPSB0b2RvW1wiaWRcIl0udG9TdHJpbmcoKTtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRUb2RvID0gYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKVxuICAgICAgICByZXR1cm4gdXBkYXRlZFRvZG8uQXR0cmlidXRlc1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnRHluYW1vREIgZXJyb3I6ICcsIGVycilcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVwZGF0ZVRvZG87Il19